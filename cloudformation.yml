AWSTemplateFormatVersion: 2010-09-09

Parameters:

  CertificateArn:
    Type: String

  LegacyCertificateArn:
    Type: String

Resources:

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref AWS::StackName
      ProtocolType: HTTP
      Target: !GetAtt Lambda.Arn
      CredentialsArn: !GetAtt ApiRole.Arn

  ApiOverrides:
    Type: AWS::ApiGatewayV2::ApiGatewayManagedOverrides
    Properties:
      ApiId: !Ref Api
      Stage:
        AccessLogSettings:
          DestinationArn: !GetAtt ApiLogGroup.Arn
          Format: '{"sourceIp":"$context.identity.sourceIp","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","responseLength":"$context.responseLength","responseLatency":"$context.responseLatency","requestTime":"$context.requestTime","protocol":"$context.protocol","userAgent":"$context.identity.userAgent","requestId":"$context.requestId"}'

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 180

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: apigateway.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Lambda.Arn

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 90

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
        - PolicyName: policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: main.py
      Handler: main.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Timeout: 30

  Hyp3DomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: hyp3.asf.alaska.edu
      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateArn
          EndpointType: REGIONAL

  Hyp3Mapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref Hyp3DomainName
      Stage: $default

  Hyp3ApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: api.hyp3.asf.alaska.edu
      DomainNameConfigurations:
        - CertificateArn: !Ref LegacyCertificateArn
          EndpointType: REGIONAL

  Hyp3ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref Hyp3ApiDomainName
      Stage: $default

  Hyp3DownloadDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: hyp3-download.asf.alaska.edu
      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateArn
          EndpointType: REGIONAL

  Hyp3DownloadMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref Hyp3DownloadDomainName
      Stage: $default
